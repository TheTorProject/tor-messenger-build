From 298868aee8d58055e6e210a922cf55beec70db4f Mon Sep 17 00:00:00 2001
From: Arlo Breault <arlolra@gmail.com>
Date: Tue, 15 Mar 2016 17:40:42 -0700
Subject: [PATCH 05/28] Trac 13312: OTR over Twitter DMs

---
 chat/components/src/imConversations.js |   3 +-
 chat/modules/imContentSink.jsm         |  10 +-
 chat/protocols/twitter/twitter.js      | 484 +++++++++++++++++++--------------
 3 files changed, 289 insertions(+), 208 deletions(-)

diff --git a/chat/components/src/imConversations.js b/chat/components/src/imConversations.js
index 6fc5d0d24..2a53a2c86 100644
--- a/chat/components/src/imConversations.js
+++ b/chat/components/src/imConversations.js
@@ -414,7 +414,8 @@ UIConversation.prototype = {
       this.notifyObservers(aSubject, "received-message");
       if (aSubject.cancelled)
         return;
-      aSubject.conversation.prepareForDisplaying(aSubject);
+      if (!aSubject.system)
+        aSubject.conversation.prepareForDisplaying(aSubject);
 
       this._messages.push(aSubject);
       ++this._unreadMessageCount;
diff --git a/chat/modules/imContentSink.jsm b/chat/modules/imContentSink.jsm
index ee067afdf..abd95fc71 100644
--- a/chat/modules/imContentSink.jsm
+++ b/chat/modules/imContentSink.jsm
@@ -47,6 +47,7 @@ var kAllowedMozClasses =
   aClassName => aClassName == "moz-txt-underscore" ||
                 aClassName == "moz-txt-tag" ||
                 aClassName == "ib-person";
+var kAllowedAnchorClasses = aClassName => aClassName == "ib-person";
 
 /* Tags whose content should be fully removed, and reported in the Error Console. */
 var kForbiddenTags = {
@@ -61,7 +62,8 @@ var kStrictMode = {
   tags: {
     'a': {
       'title': true,
-      'href': kAllowedURLs
+      'href': kAllowedURLs,
+      'class': kAllowedAnchorClasses
     },
     'br': true,
     'p': true
@@ -80,7 +82,8 @@ var kStandardMode = {
     'div': true,
     'a': {
       'title': true,
-      'href': kAllowedURLs
+      'href': kAllowedURLs,
+      'class': kAllowedAnchorClasses
     },
     'em': true,
     'strong': true,
@@ -117,7 +120,8 @@ var kPermissiveMode = {
     'div': true,
     'a': {
       'title': true,
-      'href': kAllowedURLs
+      'href': kAllowedURLs,
+      'class': kAllowedAnchorClasses
     },
     'font': {
       'face': true,
diff --git a/chat/protocols/twitter/twitter.js b/chat/protocols/twitter/twitter.js
index 59f60cc22..4d8e04c02 100644
--- a/chat/protocols/twitter/twitter.js
+++ b/chat/protocols/twitter/twitter.js
@@ -36,8 +36,11 @@ ChatBuddy.prototype = {
   set buddyIconFilename(aName) {
     // Prevent accidental removal of the getter.
     throw("Don't set chatBuddy.buddyIconFilename directly for Twitter.");
+  },
+  createConversation: function() {
+    return this._account.createConversation(this._name);
   }
-}
+};
 
 function Tweet(aTweet, aWho, aMessage, aObject)
 {
@@ -48,6 +51,13 @@ Tweet.prototype = {
   __proto__: GenericMessagePrototype,
   _deleted: false,
   getActions: function(aCount) {
+    // Direct messages have no actions.
+    if (!this.conversation.isChat) {
+      if (aCount)
+        aCount.value = 0;
+      return [];
+    }
+
     let account = this.conversation._account;
     let actions = [];
 
@@ -68,6 +78,11 @@ Tweet.prototype = {
         let screenName = this._tweet.user.screen_name;
         actions.push(new Action(_("action." + action, screenName),
                                 function() { account[action](screenName); }));
+
+        const favAction = this._tweet.favorited ? "unlike" : "like";
+        actions.push(new Action(_("action." + favAction), () => {
+          this.conversation.like(this._tweet, this._tweet.favorited);
+        }, this));
       }
       else if (this.outgoing && !this._deleted) {
         actions.push(
@@ -123,83 +138,13 @@ Action.prototype = {
   get run() { return this._action.bind(this._tweet); }
 };
 
-function Conversation(aAccount)
-{
-  this._init(aAccount);
-  this._ensureParticipantExists(aAccount.name);
-  // We need the screen names for the IDs in _friends, but _userInfo is
-  // indexed by name, so we build an ID -> name map.
-  let names = new Map([userInfo.id_str, name] for ([name, userInfo] of aAccount._userInfo));
-  for (let id_str of aAccount._friends)
-    this._ensureParticipantExists(names.get(id_str));
-
-  // If the user's info has already been received, update the timeline topic.
-  if (aAccount._userInfo.has(aAccount.name)) {
-    let userInfo = aAccount._userInfo.get(aAccount.name);
-    if ("description" in userInfo)
-      this.setTopic(userInfo.description, aAccount.name, true);
-  }
-}
-Conversation.prototype = {
-  __proto__: GenericConvChatPrototype,
-  unInit: function() {
-    delete this._account._timeline;
-    GenericConvChatPrototype.unInit.call(this);
-  },
-  inReplyToStatusId: null,
-  startReply: function(aTweet) {
-    this.inReplyToStatusId = aTweet.id_str;
-    let entities = aTweet.entities;
-
-    // Twitter replies go to all the users mentioned in the tweet.
-    let nicks = [aTweet.user.screen_name];
-    if ("user_mentions" in entities && Array.isArray(entities.user_mentions)) {
-      nicks = nicks.concat(entities.user_mentions
-                                   .map(um => um.screen_name));
-    }
-    // Ignore duplicates and the user's nick.
-    let prompt =
-      nicks.filter(function(aNick, aPos) {
-             return nicks.indexOf(aNick) == aPos && aNick != this._account.name;
-           }, this)
-           .map(aNick => "@" + aNick)
-           .join(" ") + " ";
-
-    this.notifyObservers(null, "replying-to-prompt", prompt);
-    this.notifyObservers(null, "status-text-changed",
-                         _("replyingToStatusText", aTweet.text));
-  },
-  reTweet: function(aTweet) {
-    this._account.reTweet(aTweet, this.onSentCallback,
-                          function(aException, aData) {
-      this.systemMessage(_("error.retweet", this._parseError(aData),
-                           aTweet.text), true);
-    }, this);
-  },
+// Properties / methods shared by both DirectMessageConversation and
+// TimelineConversation.
+var GenericTwitterConversation = {
   getTweetLength: function (aString) {
     // Use the Twitter library to calculate the length.
     return twttr.txt.getTweetLength(aString, this._account.config);
   },
-  sendMsg: function (aMsg) {
-    if (this.getTweetLength(aMsg) > kMaxMessageLength) {
-      this.systemMessage(_("error.tooLong"), true);
-      throw Cr.NS_ERROR_INVALID_ARG;
-    }
-    this._account.tweet(aMsg, this.inReplyToStatusId, this.onSentCallback,
-                        function(aException, aData) {
-      let error = this._parseError(aData);
-      this.systemMessage(_("error.general", error, aMsg), true);
-    }, this);
-    this.sendTyping("");
-  },
-  sendTyping: function(aString) {
-    if (aString.length == 0 && this.inReplyToStatusId) {
-      delete this.inReplyToStatusId;
-      this.notifyObservers(null, "status-text-changed", "");
-      return kMaxMessageLength;
-    }
-    return kMaxMessageLength - this.getTweetLength(aString);
-  },
   systemMessage: function(aMessage, aIsError, aDate) {
     let flags = {system: true};
     if (aIsError)
@@ -208,27 +153,26 @@ Conversation.prototype = {
       flags.time = aDate;
     this.writeMessage("twitter.com", aMessage, flags);
   },
-  onSentCallback: function(aData) {
+  onSentCallback: function(aMsg, aData) {
+    // The conversation may have been unitialized in the time it takes for
+    // the async callback to fire.  Use `_observers` as a proxy for uninit'd.
+    if (!this._observers)
+      return;
+
     let tweet = JSON.parse(aData);
-    if (tweet.user.screen_name != this._account.name)
-      throw "Wrong screen_name... Uh?";
-    this._account.displayMessages([tweet]);
-  },
-  _parseError: function(aData) {
-    let error = "";
-    try {
-      let data = JSON.parse(aData);
-      if ("error" in data)
-        error = data.error;
-      else if ("errors" in data)
-        error = data.errors[0].message;
-      if (error)
-        error = "(" + error + ")";
-    } catch(e) {}
-    return error;
+    // The OTR extension requires that the protocol not modify the message
+    // (see the notes at `imIOutgoingMessage`).  That's the contract we made.
+    // Unfortunately, Twitter trims tweets and substitutes links.
+    tweet.text = aMsg;
+    this.displayMessages([tweet]);
   },
-  parseTweet: function(aTweet) {
-    let text = aTweet.text;
+  prepareForDisplaying: function(aMsg) {
+    if (!this._tweets.has(aMsg.id))
+      return;
+    let tweet = this._tweets.get(aMsg.id)._tweet;
+    this._tweets.delete(aMsg.id);
+
+    let text = aMsg.displayMessage;
     let entities = {};
 
     // Handle retweets: retweeted_status contains the object for the original
@@ -238,8 +182,8 @@ Conversation.prototype = {
     // the FULL text from the original tweet and update the entities to match.
     // Note: the truncated flag is not always set correctly by twitter, so we
     // always make use of the original tweet.
-    if ("retweeted_status" in aTweet) {
-      let retweet = aTweet["retweeted_status"];
+    if ("retweeted_status" in tweet) {
+      let retweet = tweet["retweeted_status"];
       let retweetText, retweetEntities = {};
 
       if ("extended_tweet" in retweet) {
@@ -259,22 +203,24 @@ Conversation.prototype = {
       // We're going to take portions of the retweeted status and replace parts
       // of the original tweet, the retweeted status prepends the original
       // status with "RT @<username>: ", we need to keep the prefix.
+      // Note: this doesn't play nice with extensions that may have altered
+      // `text` to this point, but at least OTR doesn't act on `isChat`.
       let offset = text.indexOf(": ") + 2;
       text = text.slice(0, offset) + retweetText;
 
       // Keep any entities that refer to the prefix (we can refer directly to
-      // aTweet for these since they are not edited).
-      if ("entities" in aTweet) {
-        for (let type in aTweet.entities) {
+      // the tweet for these since they are not edited).
+      if ("entities" in tweet) {
+        for (let type in tweet.entities) {
           let filteredEntities =
-            aTweet.entities[type].filter(e => e.indices[0] < offset);
+            tweet.entities[type].filter(e => e.indices[0] < offset);
           if (filteredEntities.length)
             entities[type] = filteredEntities;
         }
       }
 
       // Add the entities from the retweet (a copy of these must be made since
-      // they will be edited and we do not wish to change aTweet).
+      // they will be edited and we do not wish to change the tweet).
       for (let type in retweetEntities) {
         if (!(type in entities))
           entities[type] = [];
@@ -288,90 +234,41 @@ Conversation.prototype = {
             return entity;
           })
         );
-       }
-    } else if ("extended_tweet" in aTweet) {
+      }
+    } else if ("extended_tweet" in tweet) {
       // Bare bones extended tweet handling.
-      let extended = aTweet.extended_tweet;
+      let extended = tweet.extended_tweet;
       text = extended.full_text;
       if ("entities" in extended)
         entities = extended.entities;
     } else {
       // For non-retweets, we just want to use the entities that are given.
-      if ("entities" in aTweet)
-        entities = aTweet.entities;
+      if ("entities" in tweet)
+        entities = tweet.entities;
     }
 
     this._account.LOG("Tweet: " + text);
 
-    if (Object.keys(entities).length) {
-      /* entArray is an array of entities ready to be replaced in the tweet,
-       * each entity contains:
-       *  - start: the start index of the entity inside the tweet,
-       *  - end: the end index of the entity inside the tweet,
-       *  - str: the string that should be replaced inside the tweet,
-       *  - href: the url (href attribute) of the created link tag,
-       *  - [optional] text: the text to display for the link,
-       *     The original string (str) will be used if this is not set.
-       *  - [optional] title: the title attribute for the link.
-       */
-      let entArray = [];
-      if ("hashtags" in entities && Array.isArray(entities.hashtags)) {
-        entArray = entArray.concat(entities.hashtags.map(h => ({
-          start: h.indices[0],
-          end: h.indices[1],
-          str: "#" + h.text,
-          href: "https://twitter.com/#!/search?q=%23" + h.text})));
-      }
-      if ("urls" in entities && Array.isArray(entities.urls)) {
-        entArray = entArray.concat(entities.urls.map(u => ({
-          start: u.indices[0],
-          end: u.indices[1],
-          str: u.url,
-          text: u.display_url || u.url,
-          href: u.expanded_url || u.url})));
-      }
-      if ("user_mentions" in entities &&
-          Array.isArray(entities.user_mentions)) {
-        entArray = entArray.concat(entities.user_mentions.map(um => ({
-          start: um.indices[0],
-          end: um.indices[1],
-          str: "@" + um.screen_name,
-          text: '@<span class="ib-person">' + um.screen_name + "</span>",
-          title: um.name,
-          href: "https://twitter.com/" + um.screen_name})));
-      }
-      entArray.sort((a, b) => a.start - b.start);
-      let offset = 0;
-      for each (let entity in entArray) {
-        let str = text.substring(offset + entity.start, offset + entity.end);
-        if (str[0] == "\uFF20") // ＠ - unicode character similar to @
-          str = "@" + str.substring(1);
-        if (str[0] == "\uFF03") // ＃ - unicode character similar to #
-          str = "#" + str.substring(1);
-        if (str.toLowerCase() != entity.str.toLowerCase())
-          continue;
-
-        let html = "<a href=\"" + entity.href + "\"";
-        if ("title" in entity)
-          html += " title=\"" + entity.title + "\"";
-        html += ">" + ("text" in entity ? entity.text : entity.str) + "</a>";
-        text = text.slice(0, offset + entity.start) + html +
-               text.slice(offset + entity.end);
-        offset += html.length - (entity.end - entity.start);
-      }
-    }
+    aMsg.displayMessage = twttr.txt.autoLink(text, {
+      usernameClass: "ib-person",
+      usernameIncludeSymbol: true,
+      // Pass in the url entities so the t.co links are replaced.
+      urlEntities: tweet.entities.urls.map(function(u) {
+        let o = Object.assign(u);
+        // But remove the indices so they apply in the face of modifications.
+        delete o.indices;
+        return o;
+      })
+    });
 
-    return text;
+    GenericConversationPrototype.prepareForDisplaying.apply(this, arguments);
   },
-  displayTweet: function(aTweet) {
-    let name = aTweet.user.screen_name;
-    this._ensureParticipantExists(name);
-    let text = this.parseTweet(aTweet);
+  displayTweet: function(aTweet, aUser) {
+    let name = aUser.screen_name;
 
-    let flags =
-      name == this._account.name ? {outgoing: true} : {incoming: true};
+    let flags = name == this.nick ? {outgoing: true} : {incoming: true};
     flags.time = Math.round(new Date(aTweet.created_at) / 1000);
-    flags._iconURL = aTweet.user.profile_image_url;
+    flags._iconURL = aUser.profile_image_url;
     if (aTweet.delayed)
       flags.delayed = true;
     if (aTweet.entities && aTweet.entities.user_mentions &&
@@ -379,7 +276,138 @@ Conversation.prototype = {
         aTweet.entities.user_mentions.some(mention => mention.screen_name == this.nick))
       flags.containsNick = true;
 
-    (new Tweet(aTweet, name, text, flags)).conversation = this;
+    let tweet = new Tweet(aTweet, name, aTweet.text, flags);
+    this._tweets.set(tweet.id, tweet);
+    tweet.conversation = this;
+  },
+  _parseError: function(aData) {
+    let error = "";
+    try {
+      let data = JSON.parse(aData);
+      if ("error" in data)
+        error = data.error;
+      else if ("errors" in data)
+        error = data.errors[0].message;
+      if (error)
+        error = "(" + error + ")";
+    } catch(e) {}
+    return error;
+  },
+  getNormalizedChatBuddyName: (aNick) => aNick.replace(/^@/, "")
+};
+
+function TimelineConversation(aAccount)
+{
+  this._init(aAccount);
+  this._ensureParticipantExists(aAccount.name);
+  // We need the screen names for the IDs in _friends, but _userInfo is
+  // indexed by name, so we build an ID -> name map.
+  let entries = [];
+  for (let [name, userInfo] of aAccount._userInfo) {
+    entries.push([userInfo.id_str, name]);
+  }
+  let names = new Map(entries);
+  for (let id_str of aAccount._friends)
+    this._ensureParticipantExists(names.get(id_str));
+
+  // If the user's info has already been received, update the timeline topic.
+  if (aAccount._userInfo.has(aAccount.name)) {
+    let userInfo = aAccount._userInfo.get(aAccount.name);
+    if ("description" in userInfo)
+      this.setTopic(userInfo.description, aAccount.name, true);
+  }
+
+  // Store messages by message id.
+  this._tweets = new Map();
+}
+TimelineConversation.prototype = {
+  __proto__: GenericConvChatPrototype,
+  unInit: function() {
+    delete this._account._timeline;
+    GenericConvChatPrototype.unInit.call(this);
+  },
+  inReplyToStatusId: null,
+  startReply: function(aTweet) {
+    this.inReplyToStatusId = aTweet.id_str;
+    let entities = aTweet.entities;
+
+    // Twitter replies go to all the users mentioned in the tweet.
+    let nicks = [aTweet.user.screen_name];
+    if ("user_mentions" in entities && Array.isArray(entities.user_mentions)) {
+      nicks = nicks.concat(entities.user_mentions
+                                   .map(um => um.screen_name));
+    }
+    // Ignore duplicates and the user's nick.
+    let prompt =
+      nicks.filter(function(aNick, aPos) {
+             return nicks.indexOf(aNick) == aPos && aNick != this._account.name;
+           }, this)
+           .map(aNick => "@" + aNick)
+           .join(" ") + " ";
+
+    this.notifyObservers(null, "replying-to-prompt", prompt);
+    this.notifyObservers(null, "status-text-changed",
+                         _("replyingToStatusText", aTweet.text));
+  },
+  reTweet: function(aTweet) {
+    this._account.reTweet(aTweet, null, function(aException, aData) {
+      this.systemMessage(_("error.retweet", this._parseError(aData),
+                           aTweet.text), true);
+    }, this);
+  },
+  sendMsg: function(aMsg) {
+    if (this.getTweetLength(aMsg) > kMaxMessageLength) {
+      this.systemMessage(_("error.tooLong"), true);
+      throw Cr.NS_ERROR_INVALID_ARG;
+    }
+    this._account.tweet(aMsg, this.inReplyToStatusId,
+                        this.onSentCallback.bind(this, aMsg),
+                        function(aException, aData) {
+      let error = this._parseError(aData);
+      this.systemMessage(_("error.general", error, aMsg), true);
+    }, this);
+    this.sendTyping("");
+  },
+  like: function(aTweet, aRemoveLike = false) {
+    this._account.like(aTweet, aRemoveLike, function() {
+      aTweet.favorited = !aRemoveLike;
+    }, function(aException, aData) {
+      const messageName = aRemoveLike ? "unlike" : "like";
+      this.systemMessage(_("error." + messageName,
+                          this.parseError(aData), aTweet.text), true);
+    }, this);
+  },
+  sendTyping: function(aString) {
+    if (aString.length == 0 && this.inReplyToStatusId) {
+      delete this.inReplyToStatusId;
+      this.notifyObservers(null, "status-text-changed", "");
+      return kMaxMessageLength;
+    }
+    return kMaxMessageLength - this.getTweetLength(aString);
+  },
+  displayMessages: function(aMessages) {
+    let account = this._account;
+    let lastMsgId = account._lastMsgId;
+    for (let tweet of aMessages) {
+      if (!("user" in tweet) || !("text" in tweet) || !("id_str" in tweet) ||
+          account._knownMessageIds.has(tweet.id_str))
+        continue;
+      let id = tweet.id_str;
+      // Update the last known message.
+      // Compare the length of the ids first, and then the text.
+      // This avoids converting tweet ids into rounded numbers.
+      if (id.length > lastMsgId.length ||
+          (id.length == lastMsgId.length && id > lastMsgId))
+        lastMsgId = id;
+      account._knownMessageIds.add(id);
+      account.setUserInfo(tweet.user);
+      this._ensureParticipantExists(tweet.user.screen_name);
+      this.displayTweet(tweet, tweet.user);
+    }
+    if (lastMsgId != account._lastMsgId) {
+      account._lastMsgId = lastMsgId;
+      account.prefs.setCharPref("lastMessageId", account._lastMsgId);
+    }
   },
   _ensureParticipantExists: function(aNick) {
     if (this._participants.has(aNick))
@@ -401,6 +429,44 @@ Conversation.prototype = {
       this._account.setUserDescription(aTopic);
   }
 };
+Object.assign(TimelineConversation.prototype, GenericTwitterConversation);
+
+function DirectMessageConversation(aAccount, aName)
+{
+  this._init(aAccount, aName);
+
+  // Store messages by message id.
+  this._tweets = new Map();
+}
+DirectMessageConversation.prototype = {
+  __proto__: GenericConvIMPrototype,
+  sendMsg: function(aMsg) {
+    this._account.directMessage(aMsg, this.name,
+                                this.onSentCallback.bind(this, aMsg),
+                                function(aException, aData) {
+      let error = this._parseError(aData);
+      this.systemMessage(_("error.general", error, aMsg), true);
+    }, this);
+  },
+  displayMessages: function(aMessages) {
+    let account = this._account;
+    for (let tweet of aMessages) {
+      if (!("sender" in tweet) || !("recipient" in tweet) ||
+          !("text" in tweet) || !("id_str" in tweet))
+        continue;
+      account.setUserInfo(tweet.sender);
+      account.setUserInfo(tweet.recipient);
+      this.displayTweet(tweet, tweet.sender);
+    }
+  },
+  unInit: function() {
+    this._account.removeConversation(this.name);
+    GenericConvIMPrototype.unInit.call(this);
+  },
+  get nick() { return this._account.name; },
+  set nick(aNick) {}
+}
+Object.assign(DirectMessageConversation.prototype, GenericTwitterConversation);
 
 function Account(aProtocol, aImAccount)
 {
@@ -408,6 +474,8 @@ function Account(aProtocol, aImAccount)
   this._knownMessageIds = new Set();
   this._userInfo = new Map();
   this._friends = new Set();
+  // Contains just `DirectMessageConversation`s
+  this._conversations = new Map();
 }
 Account.prototype = {
   __proto__: GenericAccountPrototype,
@@ -535,7 +603,7 @@ Account.prototype = {
     hmac.init(hmac.SHA1,
               keyFactory.keyFromString(Ci.nsIKeyObject.HMAC, signatureKey));
     // No UTF-8 encoding, special chars are already escaped.
-    let bytes = [b.charCodeAt() for each (b in signatureBase)];
+    let bytes = [...signatureBase].map(b => b.charCodeAt());
     hmac.update(bytes, bytes.length);
     let signature = hmac.finish(true);
 
@@ -578,6 +646,17 @@ Account.prototype = {
     let url = "1.1/statuses/destroy/" + aTweet.id_str + ".json";
     this.signAndSend(url, null, [], aOnSent, aOnError, aThis);
   },
+  directMessage: function(aMsg, aName, aOnSent, aOnError, aThis) {
+    let POSTData = [["text", aMsg], ["screen_name", aName]];
+    this.signAndSend("1.1/direct_messages/new.json", null, POSTData, aOnSent,
+                     aOnError, aThis);
+  },
+  like: function(aTweet, aRemoveLike, aOnSent, aOnError, aThis) {
+    const action = aRemoveLike ? "destroy" : "create";
+    const url = `1.1/favorites/${action}.json`;
+    const POSTData = [["id", aTweet.id_str]];
+    this.signAndSend(url, null, POSTData, aOnSent, aOnError, aThis);
+  },
 
   _friends: null,
   follow: function(aUserName) {
@@ -640,29 +719,7 @@ Account.prototype = {
     }
   },
 
-  get timeline() { return this._timeline || (this._timeline = new Conversation(this)); },
-  displayMessages: function(aMessages) {
-    let lastMsgId = this._lastMsgId;
-    for each (let tweet in aMessages) {
-      if (!("user" in tweet) || !("text" in tweet) || !("id_str" in tweet) ||
-          this._knownMessageIds.has(tweet.id_str))
-        continue;
-      let id = tweet.id_str;
-      // Update the last known message.
-      // Compare the length of the ids first, and then the text.
-      // This avoids converting tweet ids into rounded numbers.
-      if (id.length > lastMsgId.length ||
-          (id.length == lastMsgId.length && id > lastMsgId))
-        lastMsgId = id;
-      this._knownMessageIds.add(id);
-      this.setUserInfo(tweet.user);
-      this.timeline.displayTweet(tweet);
-    }
-    if (lastMsgId != this._lastMsgId) {
-      this._lastMsgId = lastMsgId;
-      this.prefs.setCharPref("lastMessageId", this._lastMsgId);
-    }
-  },
+  get timeline() { return this._timeline || (this._timeline = new TimelineConversation(this)); },
 
   onTimelineError: function(aError, aResponseText, aRequest) {
     this.ERROR(aError);
@@ -710,7 +767,7 @@ Account.prototype = {
 
     this._timelineBuffer.sort(this.sortByDate);
     this._timelineBuffer.forEach(aTweet => aTweet.delayed = true);
-    this.displayMessages(this._timelineBuffer);
+    this.timeline.displayMessages(this._timelineBuffer);
 
     // Fetch userInfo for the user if we don't already have it.
     this.requestBuddyInfo(this.name);
@@ -765,7 +822,7 @@ Account.prototype = {
       this.DEBUG("Received ping");
     let messages = newText.split(/\r\n?/);
     this._pendingData = messages.pop();
-    for each (let message in messages) {
+    for (let message of messages) {
       if (!message.trim())
         continue;
       let msg;
@@ -775,13 +832,18 @@ Account.prototype = {
         this.ERROR(e + " while parsing " + message);
         continue;
       }
-      if ("text" in msg)
-        this.displayMessages([msg]);
+      if ("direct_message" in msg) {
+        let dm = msg["direct_message"];
+        if (dm.sender_screen_name !== this.name)  // These are displayed on send.
+          this.getConversation(dm.sender_screen_name).displayMessages([dm]);
+      }
+      else if ("text" in msg)
+        this.timeline.displayMessages([msg]);
       else if ("friends" in msg) {
         // Filter out the IDs that info has already been received from (e.g. a
         // tweet has been received as part of the timeline request).
         let userInfoIds = new Set();
-        for each (let userInfo in this._userInfo)
+        for (let userInfo of this._userInfo.values())
           userInfoIds.add(userInfo.id_str);
         let ids = msg.friends.filter(
           aId => !userInfoIds.has(aId.toString()));
@@ -913,10 +975,11 @@ Account.prototype = {
   finishAuthorizationRequest: function() {
     // Clean up the cookies, so that several twitter OAuth dialogs can work
     // during the same session (bug 954308).
-    let cookies = Services.cookies.getCookiesFromHost("twitter.com");
+    let cookies = Services.cookies.getCookiesFromHost("twitter.com", {});
     while (cookies.hasMoreElements()) {
       let cookie = cookies.getNext().QueryInterface(Ci.nsICookie2);
-      Services.cookies.remove(cookie.host, cookie.name, cookie.path, false);
+      Services.cookies.remove(cookie.host, cookie.name, cookie.path, false,
+                              cookie.originAttributes);
     }
 
     if (!("_browserRequest" in this))
@@ -977,7 +1040,7 @@ Account.prototype = {
   cleanUp: function() {
     this.finishAuthorizationRequest();
     if (this._pendingRequests.length != 0) {
-      for each (let request in this._pendingRequests)
+      for (let request of this._pendingRequests)
         request.abort();
       delete this._pendingRequests;
     }
@@ -1114,7 +1177,7 @@ Account.prototype = {
   // create the participant.
   onLookupReceived: function(aData) {
     let users = JSON.parse(aData);
-    for each (let user in users) {
+    for (let user of users) {
       this.setUserInfo(user);
       this.timeline._ensureParticipantExists(user.screen_name);
     }
@@ -1129,6 +1192,19 @@ Account.prototype = {
   joinChat: function(aComponents) {
     // The 'timeline' getter opens a timeline conversation if none exists.
     this.timeline;
+  },
+
+  getConversation: function(aName) {
+    if (!this._conversations.has(aName))
+      this._conversations.set(aName, new DirectMessageConversation(this, aName));
+    return this._conversations.get(aName);
+  },
+  removeConversation: function(aName) {
+    if (this._conversations.has(aName))
+      this._conversations.delete(aName);
+  },
+  createConversation: function(aName) {
+    return this.getConversation(aName);
   }
 };
 
-- 
2.11.0

